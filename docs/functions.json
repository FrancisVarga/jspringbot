[{"name":"equals","prefix":null,"description":"Compares two Strings, returning true if they are equal.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean equals(java.lang.String,java.lang.String)"},{"name":"indexOf","prefix":null,"description":"Finds the first index within a String, handling null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOf(java.lang.String,java.lang.String)"},{"name":"length","prefix":null,"description":"Gets a String's length or 0 if the String is null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int length(java.lang.String)"},{"name":"isEmpty","prefix":null,"description":"Checks if a String is empty (\"\") or null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isEmpty(java.lang.String)"},{"name":"equalsIgnoreCase","prefix":null,"description":"Compares two Strings, returning true if they are equal ignoring the case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean equalsIgnoreCase(java.lang.String,java.lang.String)"},{"name":"startsWith","prefix":null,"description":"Check if a String starts with a specified prefix.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean startsWith(java.lang.String,java.lang.String)"},{"name":"endsWith","prefix":null,"description":"Case insensitive check if a String ends with a specified suffix.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean endsWith(java.lang.String,java.lang.String)"},{"name":"lastIndexOf","prefix":null,"description":"Finds the last index within a String, handling null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int lastIndexOf(java.lang.String,java.lang.String)"},{"name":"replace","prefix":null,"description":"Replaces all occurrences of a String within another String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)"},{"name":"contains","prefix":null,"description":"Checks if String contains a search String, handling null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean contains(java.lang.String,java.lang.String)"},{"name":"split","prefix":null,"description":"Splits the provided text into an array, using whitespace as the separator.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] split(java.lang.String)"},{"name":"trim","prefix":null,"description":"Removes control characters (char <= 32) from both ends of this String, handling null by returning null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trim(java.lang.String)"},{"name":"remove","prefix":null,"description":"Removes all occurrences of a substring from within the source string.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String remove(java.lang.String,java.lang.String)"},{"name":"reverse","prefix":null,"description":"Reverses the string builder placing each character in the opposite index.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverse(java.lang.String)"},{"name":"isWhitespace","prefix":null,"description":"Checks if the String contains only whitespace.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isWhitespace(java.lang.String)"},{"name":"clean","prefix":null,"description":"Deprecated. Use trimToEmpty","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String clean(java.lang.String)"},{"name":"escape","prefix":null,"description":"Deprecated. Use StringEscapeUtils.escapeJava(String)","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String escape(java.lang.String)"},{"name":"isAlpha","prefix":null,"description":"Checks if the String contains only unicode letters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlpha(java.lang.String)"},{"name":"left","prefix":null,"description":"Gets the leftmost characters of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String left(java.lang.String,int)"},{"name":"right","prefix":null,"description":"Gets the rightmost characters of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String right(java.lang.String,int)"},{"name":"difference","prefix":null,"description":"Compares two Strings, and returns the portion where they differ.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String difference(java.lang.String,java.lang.String)"},{"name":"repeat","prefix":null,"description":"Repeat a String repeat times to form a new String.\n      <p>Example:\n      <p>\n      <table border=\"1\">\n        <tr>\n          <td> ${repeatZero}= </td>\n          <td> Set Variable </td>\n          <td> 0 </td>\n        </tr>\n        <tr>\n          <td> ${repeatThree}= </td>\n          <td> Set Variable </td>\n          <td> 3 </td>\n        </tr>\n        <tr>\n          <td> EL Should Be Equal </td>\n          <td> $[repeat('x',var('repeatZero'))] </td>\n          <td> ${EMPTY} </td>\n        </tr>\n        <tr>\n          <td> EL Should Be Equal </td>\n          <td> $[repeat('x',var('repeatZero'))] </td>\n          <td> yyy </td>\n        </tr>\n      </table>\n    ","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String repeat(java.lang.String,int)"},{"name":"startsWithIgnoreCase","prefix":null,"description":"Case insensitive check if a String starts with a specified prefix.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean startsWithIgnoreCase(java.lang.String,java.lang.String)"},{"name":"endsWithIgnoreCase","prefix":null,"description":"Case insensitive check if a String ends with a specified suffix.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean endsWithIgnoreCase(java.lang.String,java.lang.String)"},{"name":"capitalize","prefix":null,"description":"Capitalizes a String changing the first letter to title case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitalize(java.lang.String)"},{"name":"uncapitalize","prefix":null,"description":"Uncapitalizes a String changing the first letter to title case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String uncapitalize(java.lang.String)"},{"name":"containsAny","prefix":null,"description":"Checks if the String contains any character in the given set of characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsAny(java.lang.String,java.lang.String)"},{"name":"isNotBlank","prefix":null,"description":"Checks if a String is not empty (\"\"), not null and not whitespace only.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNotBlank(java.lang.String)"},{"name":"isBlank","prefix":null,"description":"Checks if a String is whitespace, empty (\"\") or null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isBlank(java.lang.String)"},{"name":"isNotEmpty","prefix":null,"description":"Checks if a String is not empty (\"\") and not null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNotEmpty(java.lang.String)"},{"name":"trimToNull","prefix":null,"description":"Removes control characters (char <= 32) from both ends of this String returning null if the String is empty (\"\") after the trim or if it is null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trimToNull(java.lang.String)"},{"name":"trimToEmpty","prefix":null,"description":"Removes control characters (char <= 32) from both ends of this String returning an empty String (\"\") if the String is empty (\"\") after the trim or if it is null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trimToEmpty(java.lang.String)"},{"name":"strip","prefix":null,"description":"Strips whitespace from the start and end of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String strip(java.lang.String)"},{"name":"stripToNull","prefix":null,"description":"Strips whitespace from the start and end of a String returning null if the String is empty (\"\") after the strip.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripToNull(java.lang.String)"},{"name":"stripToEmpty","prefix":null,"description":"Strips whitespace from the start and end of a String returning an empty String if null input.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripToEmpty(java.lang.String)"},{"name":"stripStart","prefix":null,"description":"Strips any of a set of characters from the start of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripStart(java.lang.String,java.lang.String)"},{"name":"stripEnd","prefix":null,"description":"Strips any of a set of characters from the end of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripEnd(java.lang.String,java.lang.String)"},{"name":"ordinalIndexOf","prefix":null,"description":"Finds the n-th index within a String, handling null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int ordinalIndexOf(java.lang.String,java.lang.String,int)"},{"name":"containsIgnoreCase","prefix":null,"description":"Checks if String contains a search String irrespective of case, handling null.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsIgnoreCase(java.lang.String,java.lang.String)"},{"name":"indexOfAny","prefix":null,"description":"Search a String to find the first index of any character in the given set of characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfAny(java.lang.String,java.lang.String)"},{"name":"indexOfAnyBut","prefix":null,"description":"Search a String to find the first index of any character not in the given set of characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfAnyBut(java.lang.String,java.lang.String)"},{"name":"containsOnly","prefix":null,"description":"Checks if the String contains only certain characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsOnly(java.lang.String,java.lang.String)"},{"name":"containsNone","prefix":null,"description":"Checks that the String does not contain certain characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsNone(java.lang.String,java.lang.String)"},{"name":"mid","prefix":null,"description":"Gets characters from the middle of a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String mid(java.lang.String,int,int)"},{"name":"substringBefore","prefix":null,"description":"Gets the substring before the first occurrence of a separator.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBefore(java.lang.String,java.lang.String)"},{"name":"substringAfter","prefix":null,"description":"Gets the substring after the first occurrence of a separator.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringAfter(java.lang.String,java.lang.String)"},{"name":"substringBeforeLast","prefix":null,"description":"Gets the substring before the last occurrence of a separator.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBeforeLast(java.lang.String,java.lang.String)"},{"name":"substringAfterLast","prefix":null,"description":"Gets the substring after the last occurrence of a separator.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringAfterLast(java.lang.String,java.lang.String)"},{"name":"substringBetween","prefix":null,"description":"Gets the String that is nested in between two instances of the same String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBetween(java.lang.String,java.lang.String)"},{"name":"substringsBetween","prefix":null,"description":"Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] substringsBetween(java.lang.String,java.lang.String,java.lang.String)"},{"name":"getNestedString","prefix":null,"description":"Deprecated. Use the better named substringBetween","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String getNestedString(java.lang.String,java.lang.String)"},{"name":"splitByWholeSeparator","prefix":null,"description":"Splits the provided text into an array, separator string specified.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)"},{"name":"splitByWholeSeparatorPreserveAllTokens","prefix":null,"description":"Splits the provided text into an array, separator string specified.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)"},{"name":"splitPreserveAllTokens","prefix":null,"description":"Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)"},{"name":"splitByCharacterType","prefix":null,"description":"Splits a String by Character type as returned by java.lang.Character.getType(char).","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByCharacterType(java.lang.String)"},{"name":"splitByCharacterTypeCamelCase","prefix":null,"description":"Splits a String by Character type as returned by java.lang.Character.getType(char).","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)"},{"name":"deleteSpaces","prefix":null,"description":"Deprecated. Use the better localized deleteWhitespace","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String deleteSpaces(java.lang.String)"},{"name":"deleteWhitespace","prefix":null,"description":"Deletes all whitespaces from a String as defined by Character.isWhitespace(char).","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String deleteWhitespace(java.lang.String)"},{"name":"removeStart","prefix":null,"description":"Removes a substring only if it is at the begining of a source string, otherwise returns the source string.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeStart(java.lang.String,java.lang.String)"},{"name":"removeStartIgnoreCase","prefix":null,"description":"Case insensitive removal of a substring if it is at the begining of a source string, otherwise returns the source string.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)"},{"name":"removeEnd","prefix":null,"description":"Removes a substring only if it is at the end of a source string, otherwise returns the source string.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeEnd(java.lang.String,java.lang.String)"},{"name":"removeEndIgnoreCase","prefix":null,"description":"Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)"},{"name":"replaceOnce","prefix":null,"description":"Replaces a String with another String inside a larger String, once.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)"},{"name":"replaceChars","prefix":null,"description":"Replaces multiple characters in a String in one go.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)"},{"name":"overlayString","prefix":null,"description":"Deprecated. Use better named overlay.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String overlayString(java.lang.String,java.lang.String,int,int)"},{"name":"overlay","prefix":null,"description":"Overlays part of a String with another String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String overlay(java.lang.String,java.lang.String,int,int)"},{"name":"chop","prefix":null,"description":"Remove the last character from a String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String chop(java.lang.String)"},{"name":"chopNewline","prefix":null,"description":"Deprecated. Use chomp instead.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String chopNewline(java.lang.String)"},{"name":"rightPad","prefix":null,"description":"Right pad a String with a specified String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String rightPad(java.lang.String,int,java.lang.String)"},{"name":"leftPad","prefix":null,"description":"Left pad a String with a specified String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String leftPad(java.lang.String,int,java.lang.String)"},{"name":"center","prefix":null,"description":"Centers a String in a larger String of int size.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String center(java.lang.String,int,java.lang.String)"},{"name":"upperCase","prefix":null,"description":"Converts a String to upper case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String upperCase(java.lang.String)"},{"name":"lowerCase","prefix":null,"description":"Converts a String to lower case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String lowerCase(java.lang.String)"},{"name":"capitalise","prefix":null,"description":"Deprecated. Use the standardly named capitalize.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitalise(java.lang.String)"},{"name":"uncapitalise","prefix":null,"description":"Deprecated. Use the standardly named uncapitalize.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String uncapitalise(java.lang.String)"},{"name":"swapCase","prefix":null,"description":"Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String swapCase(java.lang.String)"},{"name":"capitaliseAllWords","prefix":null,"description":"Deprecated. Use the relocated WordUtils.capitalize(String).","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitaliseAllWords(java.lang.String)"},{"name":"countMatches","prefix":null,"description":"Counts how many times the substring appears in the larger String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int countMatches(java.lang.String,java.lang.String)"},{"name":"isAlphaSpace","prefix":null,"description":"Checks if the String contains only unicode letters and space (' ').","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphaSpace(java.lang.String)"},{"name":"isAlphanumeric","prefix":null,"description":"Checks if the String contains only unicode letters or digits.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphanumeric(java.lang.String)"},{"name":"isAlphanumericSpace","prefix":null,"description":"Checks if the String contains only unicode letters, digits or space (' ').","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphanumericSpace(java.lang.String)"},{"name":"isAsciiPrintable","prefix":null,"description":"Checks if the string contains only ASCII printable characters.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAsciiPrintable(java.lang.String)"},{"name":"isNumeric","prefix":null,"description":"Checks if the String contains only unicode digits.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNumeric(java.lang.String)"},{"name":"isNumericSpace","prefix":null,"description":"Checks if the String contains only unicode digits or space (' ').","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNumericSpace(java.lang.String)"},{"name":"defaultString","prefix":null,"description":"Returns either the passed in String, or if the String is null, the value of default String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String defaultString(java.lang.String,java.lang.String)"},{"name":"defaultIfEmpty","prefix":null,"description":"Returns either the passed in String, or if the String is empty or null, the value of default String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String defaultIfEmpty(java.lang.String,java.lang.String)"},{"name":"reverseDelimited","prefix":null,"description":"Reverses a String that is delimited by a specific character.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverseDelimited(java.lang.String,char)"},{"name":"reverseDelimitedString","prefix":null,"description":"Deprecated. Use reverseDelimited(String, char) instead.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)"},{"name":"abbreviate","prefix":null,"description":"Abbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String abbreviate(java.lang.String,int)"},{"name":"indexOfDifference","prefix":null,"description":"Compares two Strings, and returns the index at which the Strings begin to differ.","functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfDifference(java.lang.String,java.lang.String)"},{"name":"asList","prefix":"array","description":"<p>Returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray(). The returned list is serializable and implements RandomAccess.\n\n      <p>This method also provides a convenient way to create a fixed-size list initialized to contain several elements:\n\n      <p>\n      Example:\n      <table>\n        <tr>\n          <td> EL Add Variable </td>\n          <td> list </td>\n          <td> $[array:asList('a','b','c')] </td>\n        </tr>\n        <tr>\n          <td> EL Should Be Equal </td>\n          <td> $['a'] </td>\n          <td> $[list[0]] </td>\n        </tr>\n      </table>\n    ","functionClass":"java.util.Arrays","functionSignature":"java.util.List asList(java.lang.Object[])"},{"name":"escapeJava","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n\n      <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n\n      <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p>\n\n      <p>The only difference between Java strings and JavaScript strings\n      is that in JavaScript, a single quote must be escaped.</p>\n\n      <p>Example:\n      <pre>\n      input string: He didn't say, \"Stop!\"\n      output string: He didn't say, \\\"Stop!\\\"\n      </pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeJava(java.lang.String)"},{"name":"escapeJavaScript","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n      <p>Escapes any values it finds into their JavaScript String form.\n      Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n\n      <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p>\n\n      <p>The only difference between Java strings and JavaScript strings\n      is that in JavaScript, a single quote must be escaped.</p>\n\n      <p>Example:\n      <pre>\n      input string: He didn't say, \"Stop!\"\n      output string: He didn\\'t say, \\\"Stop!\\\"\n      </pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeJavaScript(java.lang.String)"},{"name":"unescapeJava","prefix":"escape","description":"<p>Unescapes any Java literals found in the <code>String</code>.\n      For example, it will turn a sequence of <code>'\\'</code> and\n      <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n      is preceded by another <code>'\\'</code>.</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeJava(java.lang.String)"},{"name":"unescapeJavaScript","prefix":"escape","description":"<p>Unescapes any JavaScript literals found in the <code>String</code>.</p>\n\n      p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n      into a newline character, unless the <code>'\\'</code> is preceded by another\n      <code>'\\'</code>.</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeJavaScript(java.lang.String)"},{"name":"escapeHtml","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n\n      <p>For example:</p>\n      <p><code>\"bread\" & \"butter\"</code></p>\n      becomes:\n      <p><code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.</p>\n      <p>Supports all known HTML 4.0 entities, including funky accents.\n      Note that the commonly used apostrophe escape character (&amp;apos;)\n      is not a legal entity and so is not supported).</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeHtml(java.lang.String)"},{"name":"unescapeHtml","prefix":"escape","description":"<p>Unescapes a string containing entity escapes to a string\n      containing the actual Unicode characters corresponding to the\n      escapes. Supports HTML 4.0 entities.</p>\n\n      <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n      will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n\n      <p>If an entity is unrecognized, it is left alone, and inserted\n      verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      become \"&gt;&amp;zzzz;x\".</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeHtml(java.lang.String)"},{"name":"escapeXml","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using XML entities.</p>\n      <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n      <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      </p>\n\n      <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n      Does not support DTDs or external entities.</p>\n\n      <p>Note that unicode characters greater than 0x7f are currently escaped to\n      their numerical \\\\u equivalent. This may change in future releases. </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeXml(java.lang.String)"},{"name":"unescapeXml","prefix":"escape","description":" <p>Unescapes a string containing entity escapes to a string\n      containing the actual Unicode characters corresponding to the\n      escapes. Supports HTML 4.0 entities.</p>\n\n      <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n      will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n\n      <p>If an entity is unrecognized, it is left alone, and inserted\n      verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      become \"&gt;&amp;zzzz;x\".</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeXml(java.lang.String)"},{"name":"escapeSql","prefix":"escape","description":" ","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeSql(java.lang.String)"},{"name":"escapeCsv","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> to be suitable to pass to\n      an SQL query.</p>\n\n      <p>For example,\n      <pre>statement.executeQuery(\"SELECT * FROM MOVIES WHERE TITLE='\" +\n      StringEscapeUtils.escapeSql(\"McHale's Navy\") +\n      \"'\");</pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeCsv(java.lang.String)"},{"name":"unescapeCsv","prefix":"escape","description":"<p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n\n      <p>If the value is enclosed in double quotes, and contains a comma, newline\n      or double quote, then quotes are removed.\n      </p>\n\n      <p>Any double quote escaped characters (a pair of double quotes) are unescaped\n      to just one double quote. </p>\n\n      <p>If the value is not enclosed in double quotes, or is and does not contain a\n      comma, newline or double quote, then the String value is returned unchanged.</p>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeCsv(java.lang.String)"},{"name":"get","prefix":"col","description":"Returns the element at the specified position in this list.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.lang.Object get(java.lang.Object,int)"},{"name":"isEmpty","prefix":"col","description":"Null-safe check if the specified collection is empty.\n      <p>Null returns true.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isEmpty(java.util.Collection)"},{"name":"size","prefix":"col","description":"Gets the size of the collection/iterator specified.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"int size(java.lang.Object)"},{"name":"removeAll","prefix":"col","description":"Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n      method returns a collection containing all the elements in <code>c</code>\n      that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n      in the returned collection is the same as the cardinality of <code>e</code>\n      in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n      case the cardinality is zero. This method is useful if you do not wish to modify\n      the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection removeAll(java.util.Collection,java.util.Collection)"},{"name":"retainAll","prefix":"col","description":"Returns a collection containing all the elements in <code>collection</code>\n      that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n      in the returned collection is the same as the cardinality of <code>e</code>\n      in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n      case the cardinality is zero. This method is useful if you do not wish to modify\n      the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection retainAll(java.util.Collection,java.util.Collection)"},{"name":"index","prefix":"col","description":"Given an Object, and an index, returns the nth value in the object.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.lang.Object index(java.lang.Object,java.lang.Object)"},{"name":"subtract","prefix":"col","description":"Returns a new {@link Collection} containing <tt><i>a</i> - <i>b</i></tt>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection subtract(java.util.Collection,java.util.Collection)"},{"name":"union","prefix":"col","description":"Returns a {@link Collection} containing the union of the given {@link Collection}s.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection union(java.util.Collection,java.util.Collection)"},{"name":"intersection","prefix":"col","description":"Returns a {@link Collection} containing the intersection\n      of the given {@link Collection}s.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection intersection(java.util.Collection,java.util.Collection)"},{"name":"containsAny","prefix":"col","description":"Returns <code>true</code> iff at least one element is in both collections.\n      <p>In other words, this method returns <code>true</code> iff the\n      {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean containsAny(java.util.Collection,java.util.Collection)"},{"name":"isFull","prefix":"col","description":"Returns true if no more elements can be added to the Collection.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isFull(java.util.Collection)"},{"name":"isNotEmpty","prefix":"col","description":"Null-safe check if the specified collection is not empty.\n      <p>Null returns false.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isNotEmpty(java.util.Collection)"},{"name":"disjunction","prefix":"col","description":"Returns a {@link Collection} containing the exclusive disjunction\n      (symmetric difference) of the given {@link Collection}s.\n      <p>\n      The cardinality of each element <i>e</i> in the returned {@link Collection}\n      will be equal to\n      <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.\n      <p>\n      This is equivalent to\n      <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>\n      or\n      <tt>{@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})</tt>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection disjunction(java.util.Collection,java.util.Collection)"},{"name":"isSubCollection","prefix":"col","description":"Returns <tt>true</tt> iff <i>a</i> is a sub-collection of <i>b</i>,\n      that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n      than or equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i>.\n\n      <p>Example:\n      <p>\n      <table border=\"1\">\n        <tr>\n          <td> *** Variables *** </td>\n          <td> </td>\n          <td> </td>\n          <td> </td>\n          <td> </td>\n        </tr>\n        <tr>\n          <td> @{col1}= </td>\n          <td> hello </td>\n          <td> world </td>\n          <td> good morning </td>\n          <td> good night </td>\n        </tr>\n        <tr>\n          <td> @{col2}= </td>\n          <td> hello </td>\n          <td> good morning </td>\n          <td> good night </td>\n          <td> </td>\n        </tr>\n        <tr>\n          <td> @{col3}= </td>\n          <td> 2 </td>\n          <td> 3 </td>\n          <td> 4 </td>\n          <td> 5 </td>\n        </tr>\n        <tr>\n          <td> @{col4}= </td>\n          <td> 5 </td>\n          <td> 3 </td>\n          <td> 7 </td>\n          <td> </td>\n        </tr>\n      </table>\n\n      <p>\n      <table>\n        <tr>\n          <td> El Should Be True </td>\n          <td> $[col:isSubCollection(var('col2'), var('col1'))] </td>\n        </tr>\n        <tr>\n          <td> El Should Be False </td>\n          <td> $[col:isSubCollection(var('col3'), var('col4'))] </td>\n        </tr>\n      </table>","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isSubCollection(java.util.Collection,java.util.Collection)"},{"name":"isProperSubCollection","prefix":"col","description":"Returns <tt>true</tt> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n      that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n      than or equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i>, and there is at least one\n      element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n      is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n      <p>\n      The implementation assumes\n      <ul>\n        <li><code>a.size()</code> and <code>b.size()</code> represent the\n        total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n        <li><code>a.size() < Integer.MAXVALUE</code></li>\n      </ul>","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isProperSubCollection(java.util.Collection,java.util.Collection)"},{"name":"isEqualCollection","prefix":"col","description":"Returns <tt>true</tt> iff the given {@link Collection}s contain\n      exactly the same elements with exactly the same cardinalities.\n      <p>\n      That is, iff the cardinality of <i>e</i> in <i>a</i> is\n      equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i> or <i>b</i>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isEqualCollection(java.util.Collection,java.util.Collection)"},{"name":"addIgnoreNull","prefix":"col","description":"Adds an element to the collection unless the element is null.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean addIgnoreNull(java.util.Collection,java.lang.Object)"},{"name":"sizeIsEmpty","prefix":"col","description":"Checks if the specified collection/array/iterator is empty.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean sizeIsEmpty(java.lang.Object)"},{"name":"reverseArray","prefix":"col","description":"Reverses the order of the given array.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"void reverseArray(java.lang.Object[])"},{"name":"typedCollection","prefix":"col","description":"Returns a typed collection backed by the given collection.\n      <p>Only objects of the specified type can be added to the collection.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection typedCollection(java.util.Collection,java.lang.Class)"},{"name":"getObject","prefix":"map","description":"Gets from a Map in a null-safe manner.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Object getObject(java.util.Map,java.lang.Object)"},{"name":"getBoolean","prefix":"map","description":"Gets a Boolean from a Map in a null-safe manner.\n      <p>If the value is a <code>Boolean</code> it is returned directly.\n      If the value is a <code>String</code> and it equals 'true' ignoring case\n      then <code>true</code> is returned, otherwise <code>false</code>.\n      If the value is a <code>Number</code> an integer zero value returns\n      <code>false</code> and non-zero returns <code>true</code>.\n      Otherwise, <code>null</code> is returned.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)"},{"name":"getLong","prefix":"map","description":"Gets a long from a Map in a null-safe manner.\n      <p>The long is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Long getLong(java.util.Map,java.lang.Object,java.lang.Long)"},{"name":"getFloat","prefix":"map","description":"Looks up the given key in the given map, converting the result into\n      a float, using the default value if the the conversion fails.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Float getFloat(java.util.Map,java.lang.Object,java.lang.Float)"},{"name":"getDouble","prefix":"map","description":"Gets a Double from a Map in a null-safe manner.\n      <p>The Double is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Double getDouble(java.util.Map,java.lang.Object,java.lang.Double)"},{"name":"isEmpty","prefix":"map","description":"Null-safe check if the specified map is empty.\n      <p>Null returns true.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean isEmpty(java.util.Map)"},{"name":"getInteger","prefix":"map","description":"Gets a Integer from a Map in a null-safe manner.\n      <p>The Integer is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Integer getInteger(java.util.Map,java.lang.Object)"},{"name":"getString","prefix":"map","description":"Gets a String from a Map in a null-safe manner.\n      <p>The String is obtained via <code>toString</code>.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.String getString(java.util.Map,java.lang.Object)"},{"name":"getBooleanValue","prefix":"map","description":"Gets a boolean from a Map in a null-safe manner.\n      <p>If the value is a <code>Boolean</code> its value is returned.\n      If the value is a <code>String</code> and it equals 'true' ignoring case\n      then <code>true</code> is returned, otherwise <code>false</code>.\n      If the value is a <code>Number</code> an integer zero value returns\n      <code>false</code> and non-zero returns <code>true</code>.\n      Otherwise, <code>false</code> is returned.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean getBooleanValue(java.util.Map,java.lang.Object)"},{"name":"isNotEmpty","prefix":"map","description":"Null-safe check if the specified map is not empty.\n      <p>Null returns false.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean isNotEmpty(java.util.Map)"},{"name":"getIntValue","prefix":"map","description":"Gets an int from a Map in a null-safe manner,\n      using the default value if the the conversion fails.\n      <p>The int is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"int getIntValue(java.util.Map,java.lang.Object)"},{"name":"getLongValue","prefix":"map","description":"Gets a long from a Map in a null-safe manner.\n      <p>The long is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"long getLongValue(java.util.Map,java.lang.Object)"},{"name":"getFloatValue","prefix":"map","description":"Gets a float from a Map in a null-safe manner,\n      using the default value if the the conversion fails.\n      <p>The float is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"float getFloatValue(java.util.Map,java.lang.Object)"},{"name":"getDoubleValue","prefix":"map","description":"Gets a double from a Map in a null-safe manner.\n      <p>The double is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"double getDoubleValue(java.util.Map,java.lang.Object)"},{"name":"absLong","prefix":"math","description":"Returns the absolute value of a long value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.\n    ","functionClass":"java.lang.Math","functionSignature":"long abs(long)"},{"name":"absDouble","prefix":"math","description":"Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases:\n\n        If the argument is positive zero or negative zero, the result is positive zero.\n        If the argument is infinite, the result is positive infinity.\n        If the argument is NaN, the result is NaN.\n    ","functionClass":"java.lang.Math","functionSignature":"double abs(double)"},{"name":"absFloat","prefix":"math","description":"Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases:\n\n        If the argument is positive zero or negative zero, the result is positive zero.\n        If the argument is infinite, the result is positive infinity.\n        If the argument is NaN, the result is NaN.\n    ","functionClass":"java.lang.Math","functionSignature":"float abs(float)"},{"name":"absInteger","prefix":"math","description":"Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned\n    ","functionClass":"java.lang.Math","functionSignature":"int abs(int)"},{"name":"sin","prefix":"math","description":"Returns the trigonometric sine of an angle. Special cases:\n\n        If the argument is NaN or an infinity, then the result is NaN.\n        If the argument is zero, then the result is a zero with the same sign as the argument.\n\n    A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double sin(double)"},{"name":"cos","prefix":"math","description":"Returns the trigonometric cosine of an angle. Special cases:\n\n        If the argument is NaN or an infinity, then the result is NaN.\n\n    A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double cos(double)"},{"name":"tan","prefix":"math","description":"Returns the trigonometric tangent of an angle. Special cases:\n\n        If the argument is NaN or an infinity, then the result is NaN.\n        If the argument is zero, then the result is a zero with the same sign as the argument.\n\n    A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double tan(double)"},{"name":"atan2","prefix":"math","description":"Converts rectangular coordinates (x, y) to polar (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi. Special cases:\n\n        If either argument is NaN, then the result is NaN.\n        If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero.\n        If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero.\n        If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the double value closest to pi.\n        If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the double value closest to -pi.\n        If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the double value closest to pi/2.\n        If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the double value closest to -pi/2.\n        If both arguments are positive infinity, then the result is the double value closest to pi/4.\n        If the first argument is positive infinity and the second argument is negative infinity, then the result is the double value closest to 3*pi/4.\n        If the first argument is negative infinity and the second argument is positive infinity, then the result is the double value closest to -pi/4.\n        If both arguments are negative infinity, then the result is the double value closest to -3*pi/4.\n\n    A result must be within 2 ulps of the correctly rounded result. Results must be semi-monotonic.\n\t","functionClass":"java.lang.Math","functionSignature":"double atan2(double,double)"},{"name":"sqrt","prefix":"math","description":"Returns the correctly rounded positive square root of a double value. Special cases:\n\n        If the argument is NaN or less than zero, then the result is NaN.\n        If the argument is positive infinity, then the result is positive infinity.\n        If the argument is positive zero or negative zero, then the result is the same as the argument.\n\n    Otherwise, the result is the double value closest to the true mathematical square root of the argument value.\n    ","functionClass":"java.lang.Math","functionSignature":"double sqrt(double)"},{"name":"log","prefix":"math","description":"Returns the natural logarithm (base e) of a double value. Special cases:\n\n        If the argument is NaN or less than zero, then the result is NaN.\n        If the argument is positive infinity, then the result is positive infinity.\n        If the argument is positive zero or negative zero, then the result is negative infinity.\n\n    A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double log(double)"},{"name":"log10","prefix":"math","description":"Returns the base 10 logarithm of a double value. Special cases:\n\n    If the argument is NaN or less than zero, then the result is NaN.\n    If the argument is positive infinity, then the result is positive infinity.\n    If the argument is positive zero or negative zero, then the result is negative infinity.\n    If the argument is equal to 10n for integer n, then the result is n. \n\n\tThe computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double log10(double)"},{"name":"pow","prefix":"math","description":"Returns the value of the first argument raised to the power of the second argument. Special cases:\n\n        If the second argument is positive or negative zero, then the result is 1.0.\n        If the second argument is 1.0, then the result is the same as the first argument.\n        If the second argument is NaN, then the result is NaN.\n        If the first argument is NaN and the second argument is nonzero, then the result is NaN.\n        If\n            the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or\n            the absolute value of the first argument is less than 1 and the second argument is negative infinity, \n        then the result is positive infinity.\n        If\n            the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or\n            the absolute value of the first argument is less than 1 and the second argument is positive infinity, \n        then the result is positive zero.\n        If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN.\n        If\n            the first argument is positive zero and the second argument is greater than zero, or\n            the first argument is positive infinity and the second argument is less than zero, \n        then the result is positive zero.\n        If\n            the first argument is positive zero and the second argument is less than zero, or\n            the first argument is positive infinity and the second argument is greater than zero, \n        then the result is positive infinity.\n        If\n            the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or\n            the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, \n        then the result is positive zero.\n        If\n            the first argument is negative zero and the second argument is a positive finite odd integer, or\n            the first argument is negative infinity and the second argument is a negative finite odd integer, \n        then the result is negative zero.\n        If\n            the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or\n            the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, \n        then the result is positive infinity.\n        If\n            the first argument is negative zero and the second argument is a negative finite odd integer, or\n            the first argument is negative infinity and the second argument is a positive finite odd integer, \n        then the result is negative infinity.\n        If the first argument is finite and less than zero\n            if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument\n            if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument\n            if the second argument is finite and not an integer, then the result is NaN. \n        If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value.\n\n    (In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method ceil or, equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)\n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double pow(double,double)"},{"name":"exp","prefix":"math","description":"Returns Euler's number e raised to the power of a double value. Special cases:\n\n        If the argument is NaN, the result is NaN.\n        If the argument is positive infinity, then the result is positive infinity.\n        If the argument is negative infinity, then the result is positive zero.\n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double exp(double)"},{"name":"minDouble","prefix":"math","description":"Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.\n    ","functionClass":"java.lang.Math","functionSignature":"double min(double,double)"},{"name":"minFloat","prefix":"math","description":"Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.\n    ","functionClass":"java.lang.Math","functionSignature":"float min(float,float)"},{"name":"minLong","prefix":"math","description":"Returns the smaller of two long values. That is, the result is the argument closer to the value of Long.MIN_VALUE. If the arguments have the same value, the result is that same value.\n    ","functionClass":"java.lang.Math","functionSignature":"long min(long,long)"},{"name":"minInteger","prefix":"math","description":"Returns the smaller of two int values. That is, the result the argument closer to the value of Integer.MIN_VALUE. If the arguments have the same value, the result is that same value.\n    ","functionClass":"java.lang.Math","functionSignature":"int min(int,int)"},{"name":"maxFloat","prefix":"math","description":"Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.\n    ","functionClass":"java.lang.Math","functionSignature":"float max(float,float)"},{"name":"maxLong","prefix":"math","description":"Returns the greater of two long values. That is, the result is the argument closer to the value of Long.MAX_VALUE. If the arguments have the same value, the result is that same value.\n    ","functionClass":"java.lang.Math","functionSignature":"long max(long,long)"},{"name":"maxInteger","prefix":"math","description":"Returns the greater of two int values. That is, the result is the argument closer to the value of Integer.MAX_VALUE. If the arguments have the same value, the result is that same value.\n    ","functionClass":"java.lang.Math","functionSignature":"int max(int,int)"},{"name":"maxDouble","prefix":"math","description":"Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.\n    ","functionClass":"java.lang.Math","functionSignature":"double max(double,double)"},{"name":"scalbFloat","prefix":"math","description":"Return f × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between Float.MIN_EXPONENT and Float.MAX_EXPONENT, the answer is calculated exactly. If the exponent of the result would be larger than Float.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal x. When the result is non-NaN, the result has the same sign as f.\n\n    Special cases:\n\n        If the first argument is NaN, NaN is returned.\n        If the first argument is infinite, then an infinity of the same sign is returned.\n        If the first argument is zero, then a zero of the same sign is returned.\n    ","functionClass":"java.lang.Math","functionSignature":"float scalb(float,int)"},{"name":"scalbDouble","prefix":"math","description":"Return d × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between Double.MIN_EXPONENT and Double.MAX_EXPONENT, the answer is calculated exactly. If the exponent of the result would be larger than Double.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal x. When the result is non-NaN, the result has the same sign as d.\n\n    Special cases:\n\n        If the first argument is NaN, NaN is returned.\n        If the first argument is infinite, then an infinity of the same sign is returned.\n        If the first argument is zero, then a zero of the same sign is returned.\n    ","functionClass":"java.lang.Math","functionSignature":"double scalb(double,int)"},{"name":"getExponentDouble","prefix":"math","description":"Returns the unbiased exponent used in the representation of a double. Special cases:\n\n        If the argument is NaN or infinite, then the result is Double.MAX_EXPONENT + 1.\n        If the argument is zero or subnormal, then the result is Double.MIN_EXPONENT -1.\n    ","functionClass":"java.lang.Math","functionSignature":"int getExponent(double)"},{"name":"getExponentFloat","prefix":"math","description":"Returns the unbiased exponent used in the representation of a float. Special cases:\n\n        If the argument is NaN or infinite, then the result is Float.MAX_EXPONENT + 1.\n        If the argument is zero or subnormal, then the result is Float.MIN_EXPONENT -1. \n    ","functionClass":"java.lang.Math","functionSignature":"int getExponent(float)"},{"name":"signumFloat","prefix":"math","description":"Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero.\n\n    Special Cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is positive zero or negative zero, then the result is the same as the argument. \n    ","functionClass":"java.lang.Math","functionSignature":"float signum(float)"},{"name":"signumDouble","prefix":"math","description":"Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero.\n\n    Special Cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is positive zero or negative zero, then the result is the same as the argument. \n    ","functionClass":"java.lang.Math","functionSignature":"double signum(double)"},{"name":"asin","prefix":"math","description":"Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2. Special cases:\n\n        If the argument is NaN or its absolute value is greater than 1, then the result is NaN.\n        If the argument is zero, then the result is a zero with the same sign as the argument.\n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double asin(double)"},{"name":"acos","prefix":"math","description":"Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi. Special case:\n\n        If the argument is NaN or its absolute value is greater than 1, then the result is NaN.\n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double acos(double)"},{"name":"atan","prefix":"math","description":"Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2. Special cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is zero, then the result is a zero with the same sign as the argument.\n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double atan(double)"},{"name":"toRadians","prefix":"math","description":"Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.\n    ","functionClass":"java.lang.Math","functionSignature":"double toRadians(double)"},{"name":"toDegrees","prefix":"math","description":"Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90.0)) to exactly equal 0.0.\n\n    Parameters:\n        angrad - an angle, in radians \n    Returns:\n        the measurement of the angle angrad in degrees.\n    ","functionClass":"java.lang.Math","functionSignature":"double toDegrees(double)"},{"name":"cbrt","prefix":"math","description":"Returns the cube root of a double value. For positive finite x, cbrt(-x) == -cbrt(x); that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is infinite, then the result is an infinity with the same sign as the argument.\n        If the argument is zero, then the result is a zero with the same sign as the argument. \n\n    The computed result must be within 1 ulp of the exact result.\n    ","functionClass":"java.lang.Math","functionSignature":"double cbrt(double)"},{"name":"IEEEremainder","prefix":"math","description":"Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1 - f2 × n, where n is the mathematical integer closest to the exact mathematical value of the quotient f1/f2, and if two mathematical integers are equally close to f1/f2, then n is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases:\n\n        If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN.\n        If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.\n    ","functionClass":"java.lang.Math","functionSignature":"double IEEEremainder(double,double)"},{"name":"ceil","prefix":"math","description":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases:\n\n        If the argument value is already equal to a mathematical integer, then the result is the same as the argument.\n        If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.\n        If the argument value is less than zero but greater than -1.0, then the result is negative zero.\n    ","functionClass":"java.lang.Math","functionSignature":"double ceil(double)"},{"name":"floor","prefix":"math","description":"Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer. Special cases:\n\n        If the argument value is already equal to a mathematical integer, then the result is the same as the argument.\n        If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.\n    ","functionClass":"java.lang.Math","functionSignature":"double floor(double)"},{"name":"rint","prefix":"math","description":"Returns the double value that is closest in value to the argument and is equal to a mathematical integer. If two double values that are mathematical integers are equally close, the result is the integer value that is even. Special cases:\n\n        If the argument value is already equal to a mathematical integer, then the result is the same as the argument.\n        If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.\n    ","functionClass":"java.lang.Math","functionSignature":"double rint(double)"},{"name":"roundFloat","prefix":"math","description":"Returns the closest int to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type int.\n    ","functionClass":"java.lang.Math","functionSignature":"int round(float)"},{"name":"roundDouble","prefix":"math","description":"Returns the closest long to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type long.\n    ","functionClass":"java.lang.Math","functionSignature":"long round(double)"},{"name":"ulpDouble","prefix":"math","description":"Returns the size of an ulp of the argument. An ulp of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).\n    ","functionClass":"java.lang.Math","functionSignature":"double ulp(double)"},{"name":"ulpFloat","prefix":"math","description":"Returns the size of an ulp of the argument. An ulp of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).\n    ","functionClass":"java.lang.Math","functionSignature":"float ulp(float)"},{"name":"sinh","prefix":"math","description":"Returns the hyperbolic sine of a double value. The hyperbolic sine of x is defined to be (ex - e-x)/2 where e is Euler's number.\n\n    Special cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is infinite, then the result is an infinity with the same sign as the argument.\n        If the argument is zero, then the result is a zero with the same sign as the argument. \n\n    The computed result must be within 2.5 ulps of the exact result.\n    ","functionClass":"java.lang.Math","functionSignature":"double sinh(double)"},{"name":"cosh","prefix":"math","description":"Returns the hyperbolic cosine of a double value. The hyperbolic cosine of x is defined to be (ex + e-x)/2 where e is Euler's number.\n\n    Special cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is infinite, then the result is positive infinity.\n        If the argument is zero, then the result is 1.0. \n\n    The computed result must be within 2.5 ulps of the exact result.\n    ","functionClass":"java.lang.Math","functionSignature":"double cosh(double)"},{"name":"tanh","prefix":"math","description":"Returns the hyperbolic tangent of a double value. The hyperbolic tangent of x is defined to be (ex - e-x)/(ex + e-x), in other words, sinh(x)/cosh(x). Note that the absolute value of the exact tanh is always less than 1.\n\n    Special cases:\n\n        If the argument is NaN, then the result is NaN.\n        If the argument is zero, then the result is a zero with the same sign as the argument.\n        If the argument is positive infinity, then the result is +1.0.\n        If the argument is negative infinity, then the result is -1.0. \n\n    The computed result must be within 2.5 ulps of the exact result. The result of tanh for any finite input must have an absolute value less than or equal to 1. Note that once the exact result of tanh is within 1/2 of an ulp of the limit value of ±1, correctly signed ±1.0 should be returned.\n    ","functionClass":"java.lang.Math","functionSignature":"double tanh(double)"},{"name":"hypot","prefix":"math","description":"Returns sqrt(x2 +y2) without intermediate overflow or underflow.\n\n    Special cases:\n\n        If either argument is infinite, then the result is positive infinity.\n        If either argument is NaN and neither argument is infinite, then the result is NaN. \n\n    The computed result must be within 1 ulp of the exact result. If one parameter is held constant, the results must be semi-monotonic in the other parameter.\n    ","functionClass":"java.lang.Math","functionSignature":"double hypot(double,double)"},{"name":"expm1","prefix":"math","description":"Returns ex -1. Note that for values of x near 0, the exact sum of expm1(x) + 1 is much closer to the true result of ex than exp(x).\n\n    Special cases:\n\n        If the argument is NaN, the result is NaN.\n        If the argument is positive infinity, then the result is positive infinity.\n        If the argument is negative infinity, then the result is -1.0.\n        If the argument is zero, then the result is a zero with the same sign as the argument. \n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic. The result of expm1 for any finite input must be greater than or equal to -1.0. Note that once the exact result of ex - 1 is within 1/2 ulp of the limit value -1, -1.0 should be returned.\n    ","functionClass":"java.lang.Math","functionSignature":"double expm1(double)"},{"name":"log1p","prefix":"math","description":"Returns the natural logarithm of the sum of the argument and 1. Note that for small values x, the result of log1p(x) is much closer to the true result of ln(1 + x) than the floating-point evaluation of log(1.0+x).\n\n    Special cases:\n\n        If the argument is NaN or less than -1, then the result is NaN.\n        If the argument is positive infinity, then the result is positive infinity.\n        If the argument is negative one, then the result is negative infinity.\n        If the argument is zero, then the result is a zero with the same sign as the argument. \n\n    The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.\n    ","functionClass":"java.lang.Math","functionSignature":"double log1p(double)"},{"name":"copySignFloat","prefix":"math","description":"Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the StrictMath.copySign method, this method does not require NaN sign arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.\n    ","functionClass":"java.lang.Math","functionSignature":"float copySign(float,float)"},{"name":"copySignDouble","prefix":"math","description":"Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the StrictMath.copySign method, this method does not require NaN sign arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.\n    ","functionClass":"java.lang.Math","functionSignature":"double copySign(double,double)"},{"name":"nextAfterDouble","prefix":"math","description":"Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned.\n    ","functionClass":"java.lang.Math","functionSignature":"double nextAfter(double,double)"},{"name":"nextAfterFloat","prefix":"math","description":"Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned.\n    ","functionClass":"java.lang.Math","functionSignature":"float nextAfter(float,double)"},{"name":"nextUpFloat","prefix":"math","description":"Returns the floating-point value adjacent to f in the direction of positive infinity. This method is semantically equivalent to nextAfter(f, Float.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call.\n    ","functionClass":"java.lang.Math","functionSignature":"float nextUp(float)"},{"name":"nextUpDouble","prefix":"math","description":"Returns the floating-point value adjacent to d in the direction of positive infinity. This method is semantically equivalent to nextAfter(d, Double.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call.\n    ","functionClass":"java.lang.Math","functionSignature":"double nextUp(double)"},{"name":"eval","prefix":null,"description":"Evaluates expression inside a expression language function.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object eval(java.lang.String,java.lang.Object[])"},{"name":"var","prefix":null,"description":"Inteprets a robot variable inside an expression language function.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object robotVar(java.lang.String)"},{"name":"convertUnicode","prefix":null,"description":"Converts string to unicode character.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String convertUnicode(java.lang.String)"},{"name":"getMillis","prefix":null,"description":"Returns the current time in milliseconds.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Long getMillis(java.lang.String)"},{"name":"concatMillis","prefix":null,"description":"Concatenates a string to the current time in milliseconds.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String concatMillis(java.lang.String)"},{"name":"md5","prefix":null,"description":"Computes the MD5 hash of a string.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String md5(java.lang.String)"},{"name":"parseDouble","prefix":null,"description":"Parses string specified to double format.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String parseDouble(java.lang.String, java.lang.String)"},{"name":"formatDouble","prefix":null,"description":"Formats an object to produce a string given the specified format.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String formatDouble(java.lang.Double, java.lang.String)"},{"name":"resource","prefix":null,"description":"Replace variables in resource specified.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String resource(java.lang.String)"},{"name":"replaceVars","prefix":null,"description":"Replace variables in application context.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String replaceVars(java.lang.String)"},{"name":"concat","prefix":null,"description":"Concatenates the strings specified.\n\n      Example:\n      | ${str}=    | EL Evaluate | $[concat('hello', ' ', 'world')] |\n    ","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String concat(java.lang.Object[])"},{"name":"join","prefix":null,"description":"<p>Joins the elements of the provided array into a single String\n      containing the provided list of elements.</p>\n\n      <p>No delimiter is added before or after the list.\n      A <code>null</code> separator is the same as an empty String (\"\").\n      Null objects or empty strings within the array are represented by\n      empty strings.</p>\n\n      <pre>\n      StringUtils.join(null, *)                = null\n      StringUtils.join([], *)                  = \"\"\n      StringUtils.join([null], *)              = \"\"\n      StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n      StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n      StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n      StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String join(java.lang.String, java.lang.Object[])"},{"name":"substring","prefix":null,"description":"<p>Gets a substring from the specified String avoiding exceptions.</p>\n\n      <p>A negative start position can be used to start/end <code>n</code>\n      characters from the end of the String.</p>\n\n      <p>The returned substring starts with the character in the <code>start</code>\n      position and ends before the <code>end</code> position. All position counting is\n      zero-based -- i.e., to start at the beginning of the string use\n      <code>start = 0</code>. Negative start and end positions can be used to\n      specify offsets relative to the end of the String.</p>\n\n      <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n      is returned.</p>\n\n      <pre>\n      | ${s1}= | EL Evaluate | $[substring(eval('$[null]'), *, *)] |\n      | ${s2}= | EL Evaluate | $[substring(eval('$[empty]'), * ,  *)] |\n      | ${s3}= | EL Evaluate | $[substring(\"abc\", 0, 2)] |\n      | ${s4}= | EL Evaluate | $[substring(\"abc\", 2, 0)] |\n      | ${s5}= | EL Evaluate | $[substring(\"abc\", 2, 4)] |\n      | ${s6}= | EL Evaluate | $[substring(\"abc\", 4, 6)] |\n      | ${s7}= | EL Evaluate | $[substring(\"abc\", 2, 2)] |\n      | ${s8}= | EL Evaluate | $[substring(\"abc\", -2, -1)] |\n      | ${s9}= | EL Evaluate | $[substring(\"abc\", -4, 2)] |\n\n      =>\n\n      | ${s1} = null\n      | ${s2} = \"\"\n      | ${s3} = \"ab\"\n      | ${s4} = \"\"\n      | ${s5} = \"c\"\n      | ${s6} = \"\"\n      | ${s7} = \"\"\n      | ${s8} = \"b\"\n      | ${s9} = \"ab\"\n      </pre>","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String substring(java.lang.String,java.lang.Integer[])"},{"name":"in","prefix":null,"description":"Returns <tt>true</tt> if this list contains the specified element.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"boolean in(java.lang.String[])"},{"name":"inFile","prefix":null,"description":"Returns <tt>true</tt> if this list found in properties file contains the specified element.\n\n    test/resources/expression/in.properties\n    | colors.of.the.rainbow=red,orange,yellow,green,blue,indigo,violet\n    | seasons=winter,spring,summer,fall\n\n    <pre>\n    | EL Should Be False | $[inFile('colors.of.the.rainbow','periwinkle')] |\n    | EL Should Be True | $[inFile('seasons','spring')] |\n    </pre","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"boolean inFile(java.lang.String[])"},{"name":"doCase","prefix":null,"description":"Returns the value of the expression matching a pattern.\n\n      <pre>\n      | EL Add Variable | bit | 1 |\n      | EL Add Variable | color | yellow |\n      | EL Add Variable | lightSwitch | $[doCase(bit eq 1, 'ON' , bit eq 0, 'OFF')] |\n      | EL Add Variable | fruit | $[doCase(color eq 'red', 'apple' , color eq 'yellow', 'banana', color eq 'orange', 'orange')] |\n\n      =>\n\n      | $[lightSwitch] = 'ON'\n      | $[fruit] = 'banana'\n      </pre>\n      ","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object doCase(java.lang.Object[])"},{"name":"doMap","prefix":null,"description":"Returns the value of the matched key\n    <pre>\n      | EL Add Variable | countryCode | PH|\n      | EL Add Variable | countryDesc | $[doMap(countryCode, 'SG', 'Singapore', 'PH', 'Philippines', 'AU', 'Australia')] |\n\n      =>\n\n      | $[countryDesc] = 'Philippines'\n    </pre>","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object doMap(java.lang.Object[])"},{"name":"now","prefix":"date","description":"Returns the date now.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String now(java.lang.String[])"},{"name":"current","prefix":"date","description":"Returns the current date.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String current(java.lang.String[])"},{"name":"midnight","prefix":"date","description":"Returns the midnight date.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String midnight(java.lang.String[])"},{"name":"firstDayOfYear","prefix":"date","description":"Returns the first day of the year.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String firstDayOfYear(java.lang.String[])"},{"name":"firstDayOfMonth","prefix":"date","description":"Returns the first day of the month.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String firstDayOfMonth(java.lang.String[])"},{"name":"lastDayOfMonth","prefix":"date","description":"Returns the last day of the month.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String lastDayOfMonth(java.lang.String[])"},{"name":"changeISODateFormat","prefix":"date","description":"<p>Changes an ISO Date Format</p>\n\n    <p>Example:<br>\n    | EL Add Variable | date | $[date:changeISODateFormat('2013-05-06T04:46:22.000+08:00','yyyy-MM-dd HH:mm:ss.S')] |</p>\n\n    <p>=></p>\n\n    <p>date = 2013-05-06 04:46:22.0</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String changeISODateFormat(java.lang.String,java.lang.String)"},{"name":"parse","prefix":"date","description":"<p>Parse a date.</p>\n\n    <p>Example: Assumption that the date today is April 23, 2013 3:47 pm<br>\n    | Set Date Time Format | dd-MM-yyyy HH:mm:ss |<br>\n    | Print Date Time | |<br>\n    | ${dateSet}= | EL Evaluate |  $[date:parse('2013-02-08', 'yyyy-MM-dd')] | # Recornize that the string passed is a date with this format yyyy-MM-dd |<br>\n    | Print Date Time | |</p>\n\n    <p>=></p>\n\n    <p>23-04-2013 15:37:00<br>\n    08-02-2013 00:00:00</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String parse(java.lang.String[])"},{"name":"toUtilDate","prefix":"date","description":"","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.util.Date toUtilDate(java.lang.String[])"},{"name":"toSQLDate","prefix":"date","description":"\n\n    <p>Example: Assumption that the date today is Apr 23, 2013 3:47 pm<br>\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |<br>\n    | ${sqlDate}= | EL Evaluate | $[date:toSQLDate()] |</p>\n\n    <p>=></p>\n\n    <p>2013-04-23</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Date toSQLDate(java.lang.String[])"},{"name":"toSQLTime","prefix":"date","description":"\n\n    <p>Example: Assumption that the date today is Apr 23, 2013 3:47 pm<br>\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |<br>\n    | ${sqlTime}= | EL Evaluate | $[date:toSQLTime()] |</p>\n\n    <p>=></p>\n\n    <p>15:47:00</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Time toSQLTime(java.lang.String[])"},{"name":"toSQLTimestamp","prefix":"date","description":"\n\n    <p>Example: Assumption that the date today is Apr 23, 2013 3:47 pm<br>\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |<br>\n    | ${sqlTimestamp}= | EL Evaluate | $[date:toSQLTimestamp()] |</p>\n\n    <p>=></p>\n\n    <p>2013-04-23 15:47:00</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Timestamp toSQLTimestamp(java.lang.String[])"},{"name":"isBeforeNow","prefix":"date","description":"<p>Check if date passes is before date now.</p>\n\n    <p>Example:<br>\n    | EL Should Be True | $[date:isBeforeNow()] |</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.Boolean isBeforeNow(java.lang.String[])"},{"name":"isoParse","prefix":"date","description":"<p>Parses an ISO date format to the set date time format.</p>\n\n    <p>Example :<br>\n    | EL Should Be Equal | $[date:isoParse('2013-03-18T15:39:43.000+08:00')] | 2013-03-18 15:39:43 |</p>\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String isoParse(java.lang.String)"},{"name":"objects","prefix":"json","description":"","functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.util.List objects(java.lang.Object[])"},{"name":"object","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"net.minidev.json.JSONObject object(java.lang.Object[])"},{"name":"propertyNames","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.util.List propertyNames(java.lang.String[])"},{"name":"property","prefix":"json","description":"Returns the JSON property given either the JsonPath expression or object and property name.\n\n      Examples:\n      By XPath Expression: //catalog/book[1]\n      | `EL Add Variable` | firstBookId | $[xml:attr('//catalog/book[1]','id')] |\n\n      =>\n      | $[firstBookId] = \"bk101\"\n\n      By Element Assigned In Robot Variable\n      | ${first_book}= | `Get XML XPath Element` | //catalog/book[1] |\n      | `EL Add Variable` | firstBookId | $[xml:attr(var('first_book'),'id')] |\n\n      =>\n      | $[firstBookId] =  \"bk101\"\n\n      By Element Assigned In EL Variable\n      | `EL Add Variable` | firstBook | $[xml:element('//catalog/book')] |\n      | `EL Add Variable` | firstBookId | $[xml:attr(firstBook,'id')] |\n\n      =>\n      | $[firstBookId] =  \"bk101\"\n\n    ","functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.lang.Object property(java.lang.Object[])"},{"name":"attr","prefix":"xml","description":"Returns the XML element attribute given either the xpath expression or element and attribute name.\n\n      Examples:\n      By XPath Expression: //catalog/book[1]\n      | `EL Add Variable` | firstBookId | $[xml:attr('//catalog/book[1]','id')] |\n\n      =>\n      | $[firstBookId] = \"bk101\"\n\n      By Element Assigned In Robot Variable\n      | ${first_book}= | `Get XML XPath Element` | //catalog/book[1] |\n      | `EL Add Variable` | firstBookId | $[xml:attr(var('first_book'),'id')] |\n\n      =>\n      | $[firstBookId] =  \"bk101\"\n\n      By Element Assigned In EL Variable\n      | `EL Add Variable` | firstBook | $[xml:element('//catalog/book')] |\n      | `EL Add Variable` | firstBookId | $[xml:attr(firstBook,'id')] |\n\n      =>\n      | $[firstBookId] =  \"bk101\"\n    ","functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.lang.String attr(java.lang.Object[])"},{"name":"text","prefix":"xml","description":"Return the XML text contents given either the xpath expression or element.\n\n      Examples:\n      By XPath Expressions\n      | `EL Add Variable` | secondGenre | $[xml:text('//catalog/book[2]/genre')]\n      | `EL Add Variable` | firstGenre | $[xml:text('//catalog/book/genre')] |\n\n      =>\n      | secondGenre = \"Fantasy\"\n      | firstGenre = \"Computer\"\n\n      By Element Assigned In Robot Variable\n      | ${second_book}= | `Get XML XPath Element` | //catalog/book[2] |\n      | `EL Add Variable` | secondGenre | $[xml:text(var('second_book'), '//book/genre')] |\n\n      =>\n      | secondGenre = \"Fantasy\"\n\n      By Element Assigned In EL Variable\n      | `EL Add Variable` | secondBook | $[xml:element('//catalog/book[2]')] |\n      | `EL Add Variable` | secondGenre | $[xml:text(secondBook, '//book/genre')] |\n\n      =>\n      | secondGenre = \"Fantasy\"\n    ","functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.lang.String text(java.lang.Object[])"},{"name":"elements","prefix":"xml","description":"Return the list of XML elements given the xpath expression\n\n      Example:\n      | `EL Add Variable` | books | $[xml:elements('//catalog/book')] |\n\n      =>\n      | $[books] =\n      | Element [0]:\n      | ","functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.util.List elements(java.lang.Object[])"},{"name":"element","prefix":"xml","description":"Return the XML element given the xpath expression.\n\n      Example:\n      | `EL Add Variable` | book | $[xml:element('//catalog/book')] |\n\n      =>\n      | $[book] =\n      | Element [0]:\n      | ","functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"org.w3c.dom.Element element(java.lang.Object[])"}]