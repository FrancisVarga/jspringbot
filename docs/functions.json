[{"name":"equals","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean equals(java.lang.String,java.lang.String)"},{"name":"indexOf","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOf(java.lang.String,java.lang.String)"},{"name":"length","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int length(java.lang.String)"},{"name":"isEmpty","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isEmpty(java.lang.String)"},{"name":"equalsIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean equalsIgnoreCase(java.lang.String,java.lang.String)"},{"name":"startsWith","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean startsWith(java.lang.String,java.lang.String)"},{"name":"endsWith","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean endsWith(java.lang.String,java.lang.String)"},{"name":"lastIndexOf","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int lastIndexOf(java.lang.String,java.lang.String)"},{"name":"replace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)"},{"name":"contains","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean contains(java.lang.String,java.lang.String)"},{"name":"split","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] split(java.lang.String)"},{"name":"trim","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trim(java.lang.String)"},{"name":"remove","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String remove(java.lang.String,java.lang.String)"},{"name":"reverse","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverse(java.lang.String)"},{"name":"isWhitespace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isWhitespace(java.lang.String)"},{"name":"clean","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String clean(java.lang.String)"},{"name":"escape","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String escape(java.lang.String)"},{"name":"isAlpha","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlpha(java.lang.String)"},{"name":"left","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String left(java.lang.String,int)"},{"name":"right","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String right(java.lang.String,int)"},{"name":"difference","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String difference(java.lang.String,java.lang.String)"},{"name":"repeat","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String repeat(java.lang.String,int)"},{"name":"startsWithIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean startsWithIgnoreCase(java.lang.String,java.lang.String)"},{"name":"endsWithIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean endsWithIgnoreCase(java.lang.String,java.lang.String)"},{"name":"capitalize","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitalize(java.lang.String)"},{"name":"uncapitalize","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String uncapitalize(java.lang.String)"},{"name":"containsAny","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsAny(java.lang.String,java.lang.String)"},{"name":"isNotBlank","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNotBlank(java.lang.String)"},{"name":"isBlank","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isBlank(java.lang.String)"},{"name":"isNotEmpty","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNotEmpty(java.lang.String)"},{"name":"trimToNull","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trimToNull(java.lang.String)"},{"name":"trimToEmpty","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String trimToEmpty(java.lang.String)"},{"name":"strip","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String strip(java.lang.String)"},{"name":"stripToNull","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripToNull(java.lang.String)"},{"name":"stripToEmpty","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripToEmpty(java.lang.String)"},{"name":"stripStart","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripStart(java.lang.String,java.lang.String)"},{"name":"stripEnd","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String stripEnd(java.lang.String,java.lang.String)"},{"name":"ordinalIndexOf","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int ordinalIndexOf(java.lang.String,java.lang.String,int)"},{"name":"containsIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsIgnoreCase(java.lang.String,java.lang.String)"},{"name":"indexOfAny","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfAny(java.lang.String,java.lang.String)"},{"name":"indexOfAnyBut","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfAnyBut(java.lang.String,java.lang.String)"},{"name":"containsOnly","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsOnly(java.lang.String,java.lang.String)"},{"name":"containsNone","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean containsNone(java.lang.String,java.lang.String)"},{"name":"mid","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String mid(java.lang.String,int,int)"},{"name":"substringBefore","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBefore(java.lang.String,java.lang.String)"},{"name":"substringAfter","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringAfter(java.lang.String,java.lang.String)"},{"name":"substringBeforeLast","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBeforeLast(java.lang.String,java.lang.String)"},{"name":"substringAfterLast","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringAfterLast(java.lang.String,java.lang.String)"},{"name":"substringBetween","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String substringBetween(java.lang.String,java.lang.String)"},{"name":"substringsBetween","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] substringsBetween(java.lang.String,java.lang.String,java.lang.String)"},{"name":"getNestedString","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String getNestedString(java.lang.String,java.lang.String)"},{"name":"splitByWholeSeparator","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)"},{"name":"splitByWholeSeparatorPreserveAllTokens1","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)"},{"name":"splitPreserveAllTokens","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)"},{"name":"splitByCharacterType","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByCharacterType(java.lang.String)"},{"name":"splitByCharacterTypeCamelCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)"},{"name":"deleteSpaces","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String deleteSpaces(java.lang.String)"},{"name":"deleteWhitespace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String deleteWhitespace(java.lang.String)"},{"name":"removeStart","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeStart(java.lang.String,java.lang.String)"},{"name":"removeStartIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)"},{"name":"removeEnd","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeEnd(java.lang.String,java.lang.String)"},{"name":"removeEndIgnoreCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)"},{"name":"replaceOnce","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)"},{"name":"replaceChars","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)"},{"name":"overlayString","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String overlayString(java.lang.String,java.lang.String,int,int)"},{"name":"overlay","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String overlay(java.lang.String,java.lang.String,int,int)"},{"name":"chop","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String chop(java.lang.String)"},{"name":"chopNewline","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String chopNewline(java.lang.String)"},{"name":"rightPad","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String rightPad(java.lang.String,int,java.lang.String)"},{"name":"leftPad","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String leftPad(java.lang.String,int,java.lang.String)"},{"name":"center","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String center(java.lang.String,int,java.lang.String)"},{"name":"upperCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String upperCase(java.lang.String)"},{"name":"lowerCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String lowerCase(java.lang.String)"},{"name":"capitalise","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitalise(java.lang.String)"},{"name":"uncapitalise","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String uncapitalise(java.lang.String)"},{"name":"swapCase","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String swapCase(java.lang.String)"},{"name":"capitaliseAllWords","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String capitaliseAllWords(java.lang.String)"},{"name":"countMatches","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int countMatches(java.lang.String,java.lang.String)"},{"name":"isAlphaSpace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphaSpace(java.lang.String)"},{"name":"isAlphanumeric","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphanumeric(java.lang.String)"},{"name":"isAlphanumericSpace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAlphanumericSpace(java.lang.String)"},{"name":"isAsciiPrintable","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isAsciiPrintable(java.lang.String)"},{"name":"isNumeric","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNumeric(java.lang.String)"},{"name":"isNumericSpace","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"boolean isNumericSpace(java.lang.String)"},{"name":"defaultString","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String defaultString(java.lang.String,java.lang.String)"},{"name":"defaultIfEmpty","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String defaultIfEmpty(java.lang.String,java.lang.String)"},{"name":"reverseDelimited","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverseDelimited(java.lang.String,char)"},{"name":"reverseDelimitedString","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)"},{"name":"abbreviate","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"java.lang.String abbreviate(java.lang.String,int)"},{"name":"indexOfDifference","prefix":null,"description":null,"functionClass":"org.apache.commons.lang.StringUtils","functionSignature":"int indexOfDifference(java.lang.String,java.lang.String)"},{"name":"asList","prefix":"array","description":"Returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray(). The returned list is serializable and implements RandomAccess.\n\n      This method also provides a convenient way to create a fixed-size list initialized to contain several elements:\n\n      Example:\n      | EL Add Variable | list | $[array:asList('a','b','c')]\n      | EL Should Be Equal | $['a'] | $[list[0]] |\n    ","functionClass":"java.util.Arrays","functionSignature":"java.util.List asList(java.lang.Object[])"},{"name":"escapeJava","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n\n      <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n\n      <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p>\n\n      <p>The only difference between Java strings and JavaScript strings\n      is that in JavaScript, a single quote must be escaped.</p>\n\n      <p>Example:\n      <pre>\n      input string: He didn't say, \"Stop!\"\n      output string: He didn't say, \\\"Stop!\\\"\n      </pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeJava(java.lang.String)"},{"name":"escapeJavaScript","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n      <p>Escapes any values it finds into their JavaScript String form.\n      Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n\n      <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p>\n\n      <p>The only difference between Java strings and JavaScript strings\n      is that in JavaScript, a single quote must be escaped.</p>\n\n      <p>Example:\n      <pre>\n      input string: He didn't say, \"Stop!\"\n      output string: He didn\\'t say, \\\"Stop!\\\"\n      </pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeJavaScript(java.lang.String)"},{"name":"unescapeJava","prefix":"escape","description":"<p>Unescapes any Java literals found in the <code>String</code>.\n      For example, it will turn a sequence of <code>'\\'</code> and\n      <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n      is preceded by another <code>'\\'</code>.</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeJava(java.lang.String)"},{"name":"unescapeJavaScript","prefix":"escape","description":"<p>Unescapes any JavaScript literals found in the <code>String</code>.</p>\n\n      p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n      into a newline character, unless the <code>'\\'</code> is preceded by another\n      <code>'\\'</code>.</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeJavaScript(java.lang.String)"},{"name":"escapeHtml","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n\n      <p>For example:</p>\n      <p><code>\"bread\" & \"butter\"</code></p>\n      becomes:\n      <p><code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.</p>\n      <p>Supports all known HTML 4.0 entities, including funky accents.\n      Note that the commonly used apostrophe escape character (&amp;apos;)\n      is not a legal entity and so is not supported).</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeHtml(java.lang.String)"},{"name":"unescapeHtml","prefix":"escape","description":"<p>Unescapes a string containing entity escapes to a string\n      containing the actual Unicode characters corresponding to the\n      escapes. Supports HTML 4.0 entities.</p>\n\n      <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n      will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n\n      <p>If an entity is unrecognized, it is left alone, and inserted\n      verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      become \"&gt;&amp;zzzz;x\".</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeHtml(java.lang.String)"},{"name":"escapeXml","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> using XML entities.</p>\n      <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n      <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      </p>\n\n      <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n      Does not support DTDs or external entities.</p>\n\n      <p>Note that unicode characters greater than 0x7f are currently escaped to\n      their numerical \\\\u equivalent. This may change in future releases. </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeXml(java.lang.String)"},{"name":"unescapeXml","prefix":"escape","description":" <p>Unescapes a string containing entity escapes to a string\n      containing the actual Unicode characters corresponding to the\n      escapes. Supports HTML 4.0 entities.</p>\n\n      <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n      will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n\n      <p>If an entity is unrecognized, it is left alone, and inserted\n      verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      become \"&gt;&amp;zzzz;x\".</p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeXml(java.lang.String)"},{"name":"escapeSql","prefix":"escape","description":" ","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeSql(java.lang.String)"},{"name":"escapeCsv","prefix":"escape","description":"<p>Escapes the characters in a <code>String</code> to be suitable to pass to\n      an SQL query.</p>\n\n      <p>For example,\n      <pre>statement.executeQuery(\"SELECT * FROM MOVIES WHERE TITLE='\" +\n      StringEscapeUtils.escapeSql(\"McHale's Navy\") +\n      \"'\");</pre>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String escapeCsv(java.lang.String)"},{"name":"unescapeCsv","prefix":"escape","description":"<p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n\n      <p>If the value is enclosed in double quotes, and contains a comma, newline\n      or double quote, then quotes are removed.\n      </p>\n\n      <p>Any double quote escaped characters (a pair of double quotes) are unescaped\n      to just one double quote. </p>\n\n      <p>If the value is not enclosed in double quotes, or is and does not contain a\n      comma, newline or double quote, then the String value is returned unchanged.</p>\n      </p>","functionClass":"org.apache.commons.lang.StringEscapeUtils","functionSignature":"java.lang.String unescapeCsv(java.lang.String)"},{"name":"get","prefix":"col","description":"Returns the element at the specified position in this list.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.lang.Object get(java.lang.Object,int)"},{"name":"isEmpty","prefix":"col","description":"Null-safe check if the specified collection is empty.\n      <p>Null returns true.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isEmpty(java.util.Collection)"},{"name":"size","prefix":"col","description":"Gets the size of the collection/iterator specified.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"int size(java.lang.Object)"},{"name":"removeAll","prefix":"col","description":"Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n      method returns a collection containing all the elements in <code>c</code>\n      that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n      in the returned collection is the same as the cardinality of <code>e</code>\n      in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n      case the cardinality is zero. This method is useful if you do not wish to modify\n      the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection removeAll(java.util.Collection,java.util.Collection)"},{"name":"retainAll","prefix":"col","description":"Returns a collection containing all the elements in <code>collection</code>\n      that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n      in the returned collection is the same as the cardinality of <code>e</code>\n      in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n      case the cardinality is zero. This method is useful if you do not wish to modify\n      the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection retainAll(java.util.Collection,java.util.Collection)"},{"name":"index","prefix":"col","description":"Given an Object, and an index, returns the nth value in the object.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.lang.Object index(java.lang.Object,java.lang.Object)"},{"name":"subtract","prefix":"col","description":"Returns a new {@link Collection} containing <tt><i>a</i> - <i>b</i></tt>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection subtract(java.util.Collection,java.util.Collection)"},{"name":"union","prefix":"col","description":"Returns a {@link Collection} containing the union of the given {@link Collection}s.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection union(java.util.Collection,java.util.Collection)"},{"name":"intersection","prefix":"col","description":"Returns a {@link Collection} containing the intersection\n      of the given {@link Collection}s.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection intersection(java.util.Collection,java.util.Collection)"},{"name":"containsAny","prefix":"col","description":"Returns <code>true</code> iff at least one element is in both collections.\n      <p>In other words, this method returns <code>true</code> iff the\n      {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean containsAny(java.util.Collection,java.util.Collection)"},{"name":"isFull","prefix":"col","description":"Returns true if no more elements can be added to the Collection.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isFull(java.util.Collection)"},{"name":"isNotEmpty","prefix":"col","description":"Null-safe check if the specified collection is not empty.\n      <p>Null returns false.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isNotEmpty(java.util.Collection)"},{"name":"disjunction","prefix":"col","description":"Returns a {@link Collection} containing the exclusive disjunction\n      (symmetric difference) of the given {@link Collection}s.\n      <p>\n      The cardinality of each element <i>e</i> in the returned {@link Collection}\n      will be equal to\n      <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.\n      <p>\n      This is equivalent to\n      <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>\n      or\n      <tt>{@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})</tt>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection disjunction(java.util.Collection,java.util.Collection)"},{"name":"isSubCollection","prefix":"col","description":"Returns <tt>true</tt> iff <i>a</i> is a sub-collection of <i>b</i>,\n      that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n      than or equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isSubCollection(java.util.Collection,java.util.Collection)"},{"name":"isProperSubCollection","prefix":"col","description":"Returns <tt>true</tt> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n      that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n      than or equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i>, and there is at least one\n      element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n      is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n      <p>\n      The implementation assumes\n      <ul>\n        <li><code>a.size()</code> and <code>b.size()</code> represent the\n        total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n        <li><code>a.size() < Integer.MAXVALUE</code></li>\n      </ul>","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isProperSubCollection(java.util.Collection,java.util.Collection)"},{"name":"isEqualCollection","prefix":"col","description":"Returns <tt>true</tt> iff the given {@link Collection}s contain\n      exactly the same elements with exactly the same cardinalities.\n      <p>\n      That is, iff the cardinality of <i>e</i> in <i>a</i> is\n      equal to the cardinality of <i>e</i> in <i>b</i>,\n      for each element <i>e</i> in <i>a</i> or <i>b</i>.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean isEqualCollection(java.util.Collection,java.util.Collection)"},{"name":"addIgnoreNull","prefix":"col","description":"Adds an element to the collection unless the element is null.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean addIgnoreNull(java.util.Collection,java.lang.Object)"},{"name":"sizeIsEmpty","prefix":"col","description":"Checks if the specified collection/array/iterator is empty.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"boolean sizeIsEmpty(java.lang.Object)"},{"name":"reverseArray","prefix":"col","description":"Reverses the order of the given array.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"void reverseArray(java.lang.Object[])"},{"name":"typedCollection","prefix":"col","description":"Returns a typed collection backed by the given collection.\n      <p>Only objects of the specified type can be added to the collection.","functionClass":"org.apache.commons.collections.CollectionUtils","functionSignature":"java.util.Collection typedCollection(java.util.Collection,java.lang.Class)"},{"name":"getObject","prefix":"map","description":"Gets from a Map in a null-safe manner.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Object getObject(java.util.Map,java.lang.Object)"},{"name":"getBoolean","prefix":"map","description":"Gets a Boolean from a Map in a null-safe manner.\n      <p>If the value is a <code>Boolean</code> it is returned directly.\n      If the value is a <code>String</code> and it equals 'true' ignoring case\n      then <code>true</code> is returned, otherwise <code>false</code>.\n      If the value is a <code>Number</code> an integer zero value returns\n      <code>false</code> and non-zero returns <code>true</code>.\n      Otherwise, <code>null</code> is returned.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)"},{"name":"getLong","prefix":"map","description":"Gets a long from a Map in a null-safe manner.\n      <p>The long is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Long getLong(java.util.Map,java.lang.Object,java.lang.Long)"},{"name":"getFloat","prefix":"map","description":"Looks up the given key in the given map, converting the result into\n      a float, using the default value if the the conversion fails.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Float getFloat(java.util.Map,java.lang.Object,java.lang.Float)"},{"name":"getDouble","prefix":"map","description":"Gets a Double from a Map in a null-safe manner.\n      <p>The Double is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Double getDouble(java.util.Map,java.lang.Object,java.lang.Double)"},{"name":"isEmpty","prefix":"map","description":"Null-safe check if the specified map is empty.\n      <p>Null returns true.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean isEmpty(java.util.Map)"},{"name":"getInteger","prefix":"map","description":"Gets a Integer from a Map in a null-safe manner.\n      <p>The Integer is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.Integer getInteger(java.util.Map,java.lang.Object)"},{"name":"getString","prefix":"map","description":"Gets a String from a Map in a null-safe manner.\n      <p>The String is obtained via <code>toString</code>.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"java.lang.String getString(java.util.Map,java.lang.Object)"},{"name":"getBooleanValue","prefix":"map","description":"Gets a boolean from a Map in a null-safe manner.\n      <p>If the value is a <code>Boolean</code> its value is returned.\n      If the value is a <code>String</code> and it equals 'true' ignoring case\n      then <code>true</code> is returned, otherwise <code>false</code>.\n      If the value is a <code>Number</code> an integer zero value returns\n      <code>false</code> and non-zero returns <code>true</code>.\n      Otherwise, <code>false</code> is returned.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean getBooleanValue(java.util.Map,java.lang.Object)"},{"name":"isNotEmpty","prefix":"map","description":"Null-safe check if the specified map is not empty.\n      <p>Null returns false.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"boolean isNotEmpty(java.util.Map)"},{"name":"getIntValue","prefix":"map","description":"Gets an int from a Map in a null-safe manner,\n      using the default value if the the conversion fails.\n      <p>The int is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"int getIntValue(java.util.Map,java.lang.Object)"},{"name":"getLongValue","prefix":"map","description":"Gets a long from a Map in a null-safe manner.\n      <p>The long is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"long getLongValue(java.util.Map,java.lang.Object)"},{"name":"getFloatValue","prefix":"map","description":"Gets a float from a Map in a null-safe manner,\n      using the default value if the the conversion fails.\n      <p>The float is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"float getFloatValue(java.util.Map,java.lang.Object)"},{"name":"getDoubleValue","prefix":"map","description":"Gets a double from a Map in a null-safe manner.\n      <p>The double is obtained from the results of {@link #getNumber(Map,Object)}.","functionClass":"org.apache.commons.collections.MapUtils","functionSignature":"double getDoubleValue(java.util.Map,java.lang.Object)"},{"name":"absLong","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"long abs(long)"},{"name":"absDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double abs(double)"},{"name":"absFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float abs(float)"},{"name":"absInteger","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int abs(int)"},{"name":"sin","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double sin(double)"},{"name":"cos","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double cos(double)"},{"name":"tan","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double tan(double)"},{"name":"atan2","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double atan2(double,double)"},{"name":"sqrt","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double sqrt(double)"},{"name":"log","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double log(double)"},{"name":"log10","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double log10(double)"},{"name":"pow","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double pow(double,double)"},{"name":"exp","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double exp(double)"},{"name":"minDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double min(double,double)"},{"name":"minFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float min(float,float)"},{"name":"minLong","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"long min(long,long)"},{"name":"minInteger","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int min(int,int)"},{"name":"maxFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float max(float,float)"},{"name":"maxLong","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"long max(long,long)"},{"name":"maxInteger","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int max(int,int)"},{"name":"maxDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double max(double,double)"},{"name":"scalbFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float scalb(float,int)"},{"name":"scalbDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double scalb(double,int)"},{"name":"getExponentDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int getExponent(double)"},{"name":"getExponentFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int getExponent(float)"},{"name":"signumFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float signum(float)"},{"name":"signumDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double signum(double)"},{"name":"asin","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double asin(double)"},{"name":"acos","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double acos(double)"},{"name":"atan","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double atan(double)"},{"name":"toRadians","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double toRadians(double)"},{"name":"toDegrees","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double toDegrees(double)"},{"name":"cbrt","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double cbrt(double)"},{"name":"IEEEremainder","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double IEEEremainder(double,double)"},{"name":"ceil","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double ceil(double)"},{"name":"floor","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double floor(double)"},{"name":"rint","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double rint(double)"},{"name":"roundFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"int round(float)"},{"name":"roundDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"long round(double)"},{"name":"ulpDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double ulp(double)"},{"name":"ulpFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float ulp(float)"},{"name":"sinh","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double sinh(double)"},{"name":"cosh","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double cosh(double)"},{"name":"tanh","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double tanh(double)"},{"name":"hypot","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double hypot(double,double)"},{"name":"expm1","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double expm1(double)"},{"name":"log1p","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double log1p(double)"},{"name":"copySignFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float copySign(float,float)"},{"name":"copySignDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double copySign(double,double)"},{"name":"nextAfterDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double nextAfter(double,double)"},{"name":"nextAfterFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float nextAfter(float,double)"},{"name":"nextUpFloat","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"float nextUp(float)"},{"name":"nextUpDouble","prefix":"math","description":null,"functionClass":"java.lang.Math","functionSignature":"double nextUp(double)"},{"name":"eval","prefix":null,"description":"Evaluates expression inside a expression language function.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object eval(java.lang.String,java.lang.Object[])"},{"name":"var","prefix":null,"description":"Inteprets a robot variable inside an expression language function.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object robotVar(java.lang.String)"},{"name":"convertUnicode","prefix":null,"description":"Converts string to unicode character.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String convertUnicode(java.lang.String)"},{"name":"getMillis","prefix":null,"description":"Returns the current time in milliseconds.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Long getMillis(java.lang.String)"},{"name":"concatMillis","prefix":null,"description":"Concatenates a string to the current time in milliseconds.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String concatMillis(java.lang.String)"},{"name":"md5","prefix":null,"description":"Computes the MD5 hash of a string.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String md5(java.lang.String)"},{"name":"parseDouble","prefix":null,"description":"Parses string specified to double format.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String parseDouble(java.lang.String, java.lang.String)"},{"name":"formatDouble","prefix":null,"description":"Formats an object to produce a string given the specified format.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String formatDouble(java.lang.Double, java.lang.String)"},{"name":"resource","prefix":null,"description":"Replace variables in resource specified.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String resource(java.lang.String)"},{"name":"replaceVars","prefix":null,"description":"Replace variables in application context.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String replaceVars(java.lang.String)"},{"name":"concat","prefix":null,"description":"Concatenates the strings specified.\n\n      Example:\n      | ${str}=    | EL Evaluate | $[concat('hello', ' ', 'world')] |\n    ","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String concat(java.lang.Object[])"},{"name":"join","prefix":null,"description":"<p>Joins the elements of the provided array into a single String\n      containing the provided list of elements.</p>\n\n      <p>No delimiter is added before or after the list.\n      A <code>null</code> separator is the same as an empty String (\"\").\n      Null objects or empty strings within the array are represented by\n      empty strings.</p>\n\n      <pre>\n      StringUtils.join(null, *)                = null\n      StringUtils.join([], *)                  = \"\"\n      StringUtils.join([null], *)              = \"\"\n      StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n      StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n      StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n      StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String join(java.lang.String, java.lang.Object[])"},{"name":"substring","prefix":null,"description":"<p>Gets a substring from the specified String avoiding exceptions.</p>\n\n      <p>A negative start position can be used to start/end <code>n</code>\n      characters from the end of the String.</p>\n\n      <p>The returned substring starts with the character in the <code>start</code>\n      position and ends before the <code>end</code> position. All position counting is\n      zero-based -- i.e., to start at the beginning of the string use\n      <code>start = 0</code>. Negative start and end positions can be used to\n      specify offsets relative to the end of the String.</p>\n\n      <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n      is returned.</p>\n\n      <pre>\n      | ${s1}= | EL Evaluate | $[substring(eval('$[null]'), *, *)] |\n      | ${s2}= | EL Evaluate | $[substring(eval('$[empty]'), * ,  *)] |\n      | ${s3}= | EL Evaluate | $[substring(\"abc\", 0, 2)] |\n      | ${s4}= | EL Evaluate | $[substring(\"abc\", 2, 0)] |\n      | ${s5}= | EL Evaluate | $[substring(\"abc\", 2, 4)] |\n      | ${s6}= | EL Evaluate | $[substring(\"abc\", 4, 6)] |\n      | ${s7}= | EL Evaluate | $[substring(\"abc\", 2, 2)] |\n      | ${s8}= | EL Evaluate | $[substring(\"abc\", -2, -1)] |\n      | ${s9}= | EL Evaluate | $[substring(\"abc\", -4, 2)] |\n\n      =>\n\n      | ${s1} = null\n      | ${s2} = \"\"\n      | ${s3} = \"ab\"\n      | ${s4} = \"\"\n      | ${s5} = \"c\"\n      | ${s6} = \"\"\n      | ${s7} = \"\"\n      | ${s8} = \"b\"\n      | ${s9} = \"ab\"\n      </pre>","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.String substring(java.lang.String,java.lang.Integer[])"},{"name":"in","prefix":null,"description":"Returns <tt>true</tt> if this list contains the specified element.","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"boolean in(java.lang.String[])"},{"name":"inFile","prefix":null,"description":"Returns <tt>true</tt> if this list found in properties file contains the specified element.\n\n    test/resources/expression/in.properties\n    | colors.of.the.rainbow=red,orange,yellow,green,blue,indigo,violet\n    | seasons=winter,spring,summer,fall\n\n    <pre>\n    | EL Should Be False | $[inFile('colors.of.the.rainbow','periwinkle')] |\n    | EL Should Be True | $[inFile('seasons','spring')] |\n    </pre","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"boolean inFile(java.lang.String[])"},{"name":"doCase","prefix":null,"description":"Returns the value of the expression matching a pattern.\n\n      <pre>\n      | EL Add Variable | bit | 1 |\n      | EL Add Variable | color | yellow |\n      | EL Add Variable | lightSwitch | $[doCase(bit eq 1, 'ON' , bit eq 0, 'OFF')] |\n      | EL Add Variable | fruit | $[doCase(color eq 'red', 'apple' , color eq 'yellow', 'banana', color eq 'orange', 'orange')] |\n\n      =>\n\n      | $[lightSwitch] = 'ON'\n      | $[fruit] = 'banana'\n      </pre>\n      ","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object doCase(java.lang.Object[])"},{"name":"doMap","prefix":null,"description":"Returns the value of the matched key\n    <pre>\n      | EL Add Variable | countryCode | PH|\n      | EL Add Variable | countryDesc | $[doMap(countryCode, 'SG', 'Singapore', 'PH', 'Philippines', 'AU', 'Australia')] |\n\n      =>\n\n      | $[countryDesc] = 'Philippines'\n    </pre>","functionClass":"org.jspringbot.keyword.expression.ELUtils","functionSignature":"java.lang.Object doMap(java.lang.Object[])"},{"name":"now","prefix":"date","description":"Returns the date now.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String now(java.lang.String[])"},{"name":"current","prefix":"date","description":"Returns the current date.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String current(java.lang.String[])"},{"name":"midnight","prefix":"date","description":"Returns the midnight date.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String midnight(java.lang.String[])"},{"name":"firstDayOfYear","prefix":"date","description":"Returns the first day of the year.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String firstDayOfYear(java.lang.String[])"},{"name":"firstDayOfMonth","prefix":"date","description":"Returns the first day of the month.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String firstDayOfMonth(java.lang.String[])"},{"name":"lastDayOfMonth","prefix":"date","description":"Returns the last day of the month.","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String lastDayOfMonth(java.lang.String[])"},{"name":"changeISODateFormat","prefix":"date","description":"Changes an ISO Date Format\n\n    Example:\n    | EL Add Variable | date | $[date:changeISODateFormat('2013-05-06T04:46:22.000+08:00','yyyy-MM-dd HH:mm:ss.S')] |\n\n    =>\n    date = 2013-05-06 04:46:22.0\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String changeISODateFormat(java.lang.String,java.lang.String)"},{"name":"parse","prefix":"date","description":"Parse a date.\n\n    Example: Assumption that the date today is April 23, 2013 3:47 pm\n    | Set Date Time Format | dd-MM-yyyy HH:mm:ss |\n    | Print Date Time | |\n    | ${dateSet}= | EL Evaluate |  $[date:parse('2013-02-08', 'yyyy-MM-dd')] | # Recornize that the string passed is a date with this format yyyy-MM-dd |\n    | Print Date Time | |\n\n    =>\n    23-04-2013 15:37:00\n    08-02-2013 00:00:00\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String parse(java.lang.String[])"},{"name":"toUtilDate","prefix":"date","description":"","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.util.Date toUtilDate(java.lang.String[])"},{"name":"toSQLDate","prefix":"date","description":"\n\n    Example: Assumption that the date today is Apr 23, 2013 3:47 pm\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |\n    | ${sqlDate}= | EL Evaluate | $[date:toSQLDate()] |\n\n    =>\n\n    2013-04-23\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Date toSQLDate(java.lang.String[])"},{"name":"toSQLTime","prefix":"date","description":"\n\n    Example: Assumption that the date today is Apr 23, 2013 3:47 pm\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |\n    | ${sqlTime}= | EL Evaluate | $[date:toSQLTime()] |\n\n    =>\n    15:47:00\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Time toSQLTime(java.lang.String[])"},{"name":"toSQLTimestamp","prefix":"date","description":"\n\n    Example: Assumption that the date today is Apr 23, 2013 3:47 pm\n    | Set Date Time Format | yyyy-MM-dd HH:mm:ss |\n    | ${sqlTimestamp}= | EL Evaluate | $[date:toSQLTimestamp()] |\n\n    =>\n    2013-04-23 15:47:00\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.sql.Timestamp toSQLTimestamp(java.lang.String[])"},{"name":"isBeforeNow","prefix":"date","description":"Check if date passes is before date now.\n\n    Example:\n    | EL Should Be True | $[date:isBeforeNow()] |\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.Boolean isBeforeNow(java.lang.String[])"},{"name":"isoParse","prefix":"date","description":"Parses an ISO date format to the set date time format.\n\n    Example :\n    | EL Should Be Equal | $[date:isoParse('2013-03-18T15:39:43.000+08:00')] | 2013-03-18 15:39:43 |\n    ","functionClass":"org.jspringbot.keyword.date.DateUtils","functionSignature":"java.lang.String isoParse(java.lang.String)"},{"name":"objects","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.util.List objects(java.lang.Object[])"},{"name":"object","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"net.minidev.json.JSONObject object(java.lang.Object[])"},{"name":"propertyNames","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.util.List propertyNames(java.lang.String[])"},{"name":"property","prefix":"json","description":null,"functionClass":"org.jspringbot.keyword.json.JSONUtils","functionSignature":"java.lang.Object property(java.lang.Object[])"},{"name":"attr","prefix":"xml","description":null,"functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.lang.String attr(java.lang.Object[])"},{"name":"text","prefix":"xml","description":null,"functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.lang.String text(java.lang.Object[])"},{"name":"elements","prefix":"xml","description":null,"functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"java.util.List elements(java.lang.Object[])"},{"name":"element","prefix":"xml","description":null,"functionClass":"org.jspringbot.keyword.xml.XMLUtils","functionSignature":"org.w3c.dom.Element element(java.lang.Object[])"}]